# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  pathlight

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  NetlifyToken:
    Type: String
    Description: Netlify token.
  
  GithubToken:
    Type: String
    Description: Github token.

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # This is a Lambda function config associated with the source code: get-all-items.js
  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-items.getAllItemsHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the ReportTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ReportTable
        - DynamoDBCrudPolicy:
            TableName: !Ref RawReportTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          REPORT_TABLE: !Ref ReportTable
          RAW_REPORT_TABLE: !Ref RawReportTable

      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET

  # This is a Lambda function config associated with the source code: get-by-id.js
  getByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-by-id.getByIdHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the ReportTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ReportTable
        - DynamoDBCrudPolicy:
            TableName: !Ref RawReportTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          REPORT_TABLE: !Ref ReportTable
          RAW_REPORT_TABLE: !Ref RawReportTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{id}
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  auditUrlFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      # CodeUri: hello-world/
      Handler: src/handlers/audit-url.auditUrlHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 2048
      Timeout: 240
      EphemeralStorage:
        Size: 1024
      Policies:
        # Give Create/Read/Update/Delete Permissions to the ReportTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ReportTable
        - DynamoDBCrudPolicy:
            TableName: !Ref RawReportTable
      Environment:
        Variables:
          CHROME_PATH: /tmp/chromium
          REPORT_TABLE: !Ref ReportTable
          RAW_REPORT_TABLE: !Ref RawReportTable
      # Events:
      #   Api:
      #     Type: Api
      #     Properties:
      #       Path: /
      #       Method: POST
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt MySqsQueue.Arn
            BatchSize: 1

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  ReportTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  RawReportTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2


  MySqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 360
      # Policies:
      #   Id: __default_policy_ID
      #   Statement:
      #     Sid: __owner_statement
      #     Effect: Allow
      #     Principal: "*"
      #     Action: SQS:*
      #     Resource: "*"

  MySqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties: 
      PolicyDocument:
        Id: __default_policy_ID1
        Version: "2012-10-17"
        Statement:
          Sid: __owner_statement
          Effect: Allow
          Principal: "*"
          Action: SQS:*
          Resource: "*"
      Queues:
        - !Ref MySqsQueue
  

        # Events:
        #   Api:
        #     Type: Api
        #     Properties:
        #       Path: /
        #       Method: POST


# # # # # # # # # # #

  myNetlifySite:
    Type: Custom::NetlifySite
    Properties:
      ServiceToken: {
        "Fn::Join": ["",
          ["arn:aws:lambda:",{"Ref":"AWS::Region"},":453208706738:function:custom-resource-netlify-site"]
        ]
      }
      netlifyToken: !Ref NetlifyToken
      githubToken: !Ref GithubToken
      name: pathlight.dev
      custom_domain: pathlight.dev
      build_settings:
        repo_url: https://github.com/codygriffith/pathlight
        repo_branch: main
        base: app
        dir: src
        cmd: npm run build
        allowed_branches:
          - main
        env:
          API_ENDPOINT: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
          SQS_ENDPOINT: !Ref MySqsQueue
        #   MY_ENV_KEY: hello
        #   MY_OTHER_KEY: there



Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  SqsEndpoint:
    Description: "SQS Endpoint"
    Value: !Ref MySqsQueue
  NetlifySiteId:
    Description: Netlify site ID.
    Value: { "Fn::GetAtt" : [ "myNetlifySite", "netlifySiteId" ]}


